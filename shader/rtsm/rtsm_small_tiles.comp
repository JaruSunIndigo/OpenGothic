#version 450

#extension GL_GOOGLE_include_directive : enable

#include "rtsm/rtsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(binding = 0)         uniform texture2D   outputImage;
layout(binding = 1, std140) uniform UboScene    { SceneDesc scene;       };
layout(binding = 2)         uniform utexture2D  gbufNormal;
layout(binding = 3)         uniform texture2D   depth;
layout(binding = 4, std430) readonly buffer Rt  { RtsmHeader header; uvec2 visList[]; } rtsm;
layout(binding = 5, std430)          buffer Pos { uint       alloc;  uint  data[];    } pos;
layout(binding = 6)         uniform  utexture2D largeTiles;
layout(binding = 7, rg32ui) uniform writeonly uimage2D smallTiles;

#include "rtsm/rtsm_scratch.glsl"

shared uvec4 rayTileBbox[MaxSlices];
shared uint  rayTileMinDepth[MaxSlices];
shared uint  raySliceBits;
shared uint  numSlices;

shared uint  meshletsIdCoarse[2*NumThreads];
shared uint  numMeshletsCoarse;

shared uint  meshletsId[1024];
shared uint  numMeshlets;

shared uint  numRays;
shared vec2  rays[RTSM_SMALL_TILE*RTSM_SMALL_TILE];

shared uint  meshListPtr;

uvec2 pullMeshList() {
  return texelFetch(largeTiles, ivec2((gl_WorkGroupID.xy*RTSM_SMALL_TILE)/RTSM_LARGE_TILE), 0).xy;
  }

// ray related
vec3 rayOrigin(const vec4 wpos) {
  vec4 shPos = scene.viewVirtualShadowLwc * wpos;
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

vec4 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  return scene.viewProjectLwcInv * scr;
  }

//
uint packPrimitiveId(uint meshlet, uint prim) {
  return (meshlet << 8) | prim;
  }

//
uint depthSlice(const float z) {
  float dZ   = linearDepth(z,      scene.clipInfo);
  float d0   = linearDepth(0,      scene.clipInfo);
  float d1   = linearDepth(0.9999, scene.clipInfo);
  float d    = (dZ-d0)/(d1-d0);

  return min(uint(d*MaxSlices), MaxSlices-1);
  }

void processFragment(const ivec2 fragCoord) {
  const float lamb   = texelFetch(outputImage, fragCoord, 0).x;
  const bool  actRay = !(lamb==0);
  if(!actRay)
    return;

  const float z = texelFetch(depth, fragCoord, 0).x;
  if(z==1.0)
    return;

  const uint  slice = depthSlice(z);
  const vec4  wpos  = worldPos(fragCoord.xy, z);
  const vec3  ray   = rayOrigin(wpos);

  const uint rId = atomicAdd(numRays, 1);
  rays[rId] = ray.xy;

  atomicOr(raySliceBits, 1u << slice);
  atomicMin(rayTileBbox[slice].x,   floatToOrderedUint(ray.x));
  atomicMin(rayTileBbox[slice].y,   floatToOrderedUint(ray.y));
  atomicMax(rayTileBbox[slice].z,   floatToOrderedUint(ray.x));
  atomicMax(rayTileBbox[slice].w,   floatToOrderedUint(ray.y));
  atomicMin(rayTileMinDepth[slice], floatToOrderedUint(ray.z));
  }

void tileBbox() {
  const uint  laneID = gl_LocalInvocationIndex;
  const uvec2 srcSz  = textureSize(depth,0);
  const ivec2 tileSz = ivec2(RTSM_SMALL_TILE);

  const ivec2 at0 = ivec2(gl_WorkGroupID.xy) * tileSz;
  const ivec2 xy0 = ivec2(gl_LocalInvocationID.xy);
  for(int x=xy0.x; x<tileSz.x; x+=int(gl_WorkGroupSize.x)) {
    for(int y=xy0.y; y<tileSz.y; y+=int(gl_WorkGroupSize.y)) {
      ivec2 at = at0 + ivec2(x,y);
      if(any(greaterThanEqual(at,srcSz)))
        continue;
      processFragment(at);
      }
    }
  barrier();

  vec4 rbb; float rayD;
  if(laneID<rayTileBbox.length()) {
    rbb.x = orderedUintToFloat(rayTileBbox[laneID].x);
    rbb.y = orderedUintToFloat(rayTileBbox[laneID].y);
    rbb.z = orderedUintToFloat(rayTileBbox[laneID].z);
    rbb.w = orderedUintToFloat(rayTileBbox[laneID].w);
    rayD  = orderedUintToFloat(rayTileMinDepth[laneID]);
    }
  barrier();

  if(laneID<rayTileBbox.length() && (raySliceBits & (1u << laneID))!=0) {
    const uint i = bitCount(raySliceBits & ((1u << laneID)-1u));

    rayTileBbox[i].x   = floatBitsToUint(rbb.x);
    rayTileBbox[i].y   = floatBitsToUint(rbb.y);
    rayTileBbox[i].z   = floatBitsToUint(rbb.z);
    rayTileBbox[i].w   = floatBitsToUint(rbb.w);
    rayTileMinDepth[i] = floatBitsToUint(rayD);
    }
  numSlices = bitCount(raySliceBits);
  }

bool isAabbVisible(const vec4 aabb, const float depthMax) {
  for(uint i=0; i<numSlices; ++i) {
    vec4 rbb; float rayd;
    rbb.x = uintBitsToFloat(rayTileBbox[i].x);
    rbb.y = uintBitsToFloat(rayTileBbox[i].y);
    rbb.z = uintBitsToFloat(rayTileBbox[i].z);
    rbb.w = uintBitsToFloat(rayTileBbox[i].w);
    rayd  = uintBitsToFloat(rayTileMinDepth[i]);
    if(rayd > depthMax)
      continue;
    if(!bboxIntersect(aabb, rbb))
      continue;
    return true;
    }
  return false;
  }

// meshlets
bool isMeshletVisible(uint ptr) {
  vec4  aabb     = pullMeshAabb(ptr);
  float depthMax = pullMeshDepthMax(ptr);
  return isAabbVisible(aabb, depthMax);
  }

bool meshSampleTest(uint ptr) {
  const vec4 aabb = pullMeshAabb(ptr);
  for(uint r=0; r<numRays; ++r) {
    if(bboxIncludes(aabb, rays[r]))
      return true;
    }
  return false;
  }

void refineMeshlets() {
  const uint laneID = gl_LocalInvocationIndex;

  for(uint i=laneID; i<numMeshletsCoarse; i+=NumThreads) {
    const uint ptr = meshletsIdCoarse[i];
    if(!meshSampleTest(ptr))
      continue;
    const uint id = atomicAdd(numMeshlets, 1);
    if(id<meshletsId.length())
      meshletsId[id] = ptr;
    }
  }

void traceMeshlets(const uint tilePtr, const uint visCount) {
  const uint laneID = gl_LocalInvocationIndex;
  const uint steps  = (visCount + NumThreads - 1)/NumThreads;

  for(uint s=0; s<steps; ++s) {
    const uint i   = laneID + s*NumThreads;
    const uint ptr = i<visCount ? pos.data[tilePtr + i] : NULL;

    if(ptr!=NULL && isMeshletVisible(ptr)) {
      uint id = atomicAdd(numMeshletsCoarse, 1);
      meshletsIdCoarse[id] = ptr;
      }
    barrier();

    if(numMeshletsCoarse<NumThreads && s+1!=steps)
      continue;

    refineMeshlets();
    barrier();

    numMeshletsCoarse = 0;
    barrier();
    }
  }

void main() {
  const uint laneID   = gl_LocalInvocationIndex;

  raySliceBits = 0;
  if(laneID<rayTileBbox.length()) {
    rayTileBbox[laneID]     = uvec4(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
    rayTileMinDepth[laneID] = 0xFFFFFFFF;
    }

  numRays           = 0;
  numMeshlets       = 0;
  numMeshletsCoarse = 0;
  barrier();

  tileBbox();
  barrier();

  const uvec2 meshListSrc = pullMeshList();
  traceMeshlets(meshListSrc.x, meshListSrc.y);
  barrier();

  if(numMeshlets>meshletsId.length()) {
    if(gl_LocalInvocationIndex==0)
      imageStore(smallTiles, ivec2(gl_WorkGroupID.xy), uvec4(meshListSrc,0,0));
    return;
    }

  if(gl_LocalInvocationIndex==0) {
    meshListPtr = numMeshlets==0 ? NULL : atomicAdd(pos.alloc, numMeshlets);
    if(meshListPtr+numMeshlets>pos.data.length()) {
      // out of memory
      meshListPtr = NULL;
      numMeshlets = 0;
      }
    }
  barrier();

  // store pointer to meshlets list and the list
  if(gl_LocalInvocationIndex==0) {
    // const uint baseSz = meshListSrc.y;
    imageStore(smallTiles, ivec2(gl_WorkGroupID.xy), uvec4(meshListPtr, numMeshlets, 0, 0));
    }
  for(uint i=laneID; i<numMeshlets; i+=NumThreads)
    pos.data[meshListPtr + i] = meshletsId[i];
  }
