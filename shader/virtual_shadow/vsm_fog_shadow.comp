#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable

#include "virtual_shadow/vsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

struct Epipole {
  vec2  rayOrig;
  vec2  rayDir;
  float tMin;
  float tMax;
  };

layout(local_size_x = 128) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(binding = 0, rgba8)  uniform image2D rayData;
layout(binding = 1, std140) uniform UboScene {
  SceneDesc scene;
  };
layout(binding = 2, std430) readonly buffer Ep0 { Epipole epipole[]; };
layout(binding = 3)         uniform utexture3D pageTbl;
layout(binding = 4)         uniform texture2D  pageData;

uint  NumSamples   = imageSize(rayData).x;
uint  NumSlices    = imageSize(rayData).y;

float shadowTexelFetch(vec2 shPos0) {
  int   mip    = vsmCalcMipIndexFog(shPos0.xy);
  vec2  page   = shPos0.xy / (1 << mip);
  if(any(greaterThan(abs(page), vec2(1))))
    return 0;
  return shadowTexelFetch(page, mip, pageTbl, pageData);
  }

void main() {
  const uint i       = gl_GlobalInvocationID.x;
  const uint sliceId = gl_GlobalInvocationID.y;

  if(i>=NumSamples)
    return;

  vec2  rayOrig = epipole[sliceId].rayOrig;
  vec2  rayDir  = epipole[sliceId].rayDir;
  float tMin    = epipole[sliceId].tMin;
  float tMax    = epipole[sliceId].tMax;

  const float a     = (i+0.5)/float(NumSamples);
  const float t     = tMin    + a*(tMax-tMin);
  const vec2  shPos = rayOrig + t*rayDir;
  const float sh    = shadowTexelFetch(shPos);

  imageStore(rayData, ivec2(i, sliceId), vec4(sh));
  }
