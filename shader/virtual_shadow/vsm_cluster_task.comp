#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

#include "scene.glsl"
#include "common.glsl"
#include "virtual_shadow/vsm_common.glsl"

struct IndirectCmd {
  uint vertexCount;
  uint instanceCount;
  uint firstVertex;
  uint firstInstance;
  uint writeOffset;
  };

struct Cluster {
  vec4  sphere;
  uint  bucketId_commandId;
  uint  firstMeshlet;
  int   meshletCount;
  uint  instanceId;
  };

layout(local_size_x = 1024) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(push_constant, std430) uniform UboPush {
  int meshletCount;
  } push;
layout(binding = 0, std140) uniform UboScene {
  SceneDesc scene;
  };
layout(binding = 1, std430) buffer SsboGlob     { uvec4       payload[];     };
layout(binding = 2, std430) readonly buffer Mem { uint        instanceMem[]; };
layout(binding = 4, std430) buffer IndirectBuf  { IndirectCmd cmd[];         };
layout(binding = 5, std430) readonly buffer Cbo { Cluster     clusters[];    };

layout(binding = 6, r32ui)  uniform uimage3D pageTblDepth;
layout(binding = 7, std430) buffer Pages        { VsmHeader   header; uint  pageList[]; } vsm;

layout(binding = 8, r32ui)  uniform uimage2D dbg;

shared uint pageListSize;
shared uint pageList[VSM_MAX_PAGES];

shared uint vsmMipMask;
#if !defined(VSM_ATOMIC)
shared uint anyPageGlob;
#endif

bool projectSphere(const vec4 sphere, out vec4 aabb, out float depthMax) {
  const vec3  c = (scene.viewProject * vec4(sphere.xyz, 1)).xyz;
  const float R = sphere.w;

  const float smWidthInv = 1.0/(1024.0); // NOTE: from camera.cpp
  const float zScale     = 1.0/(10*5120.0);

  float Rz = R * zScale;
  if(c.z - Rz > 1 || c.z + Rz < 0)
    return false;

  float Rx = R * smWidthInv;
  float Ry = R * smWidthInv;
  aabb     = vec4(c.xy-vec2(Rx,Ry), c.xy+vec2(Rx,Ry));
  depthMax = c.z + Rz;
  // aabb = c.xyxy;
  return true;
  }

bool frustrumTest(const vec4 sphere) {
  if(sphere.w<0.f)
    return false;

  for(int i=0; i<6; ++i) {
    if(dot(vec4(sphere.xyz,1.0), scene.frustrum[i]) <= -sphere.w) {
      return false;
      }
    }

  return true;
  }


bool projectCluster(const Cluster cluster, out vec4 aabb, out float depthMax) {
  if(cluster.instanceId==0xFFFFFFFF)
    return projectSphere(cluster.sphere, aabb, depthMax);
  return projectSphere(cluster.sphere, aabb, depthMax);
  // return projectInstance(cluster, aabb, depthMax);
  }

bool emitCluster(const Cluster cluster, uint page) {
  const uint at = atomicAdd(vsm.header.meshletCount, cluster.meshletCount);
  if(at+cluster.meshletCount > 1000000)
    return false;
  for(int i=0; i<cluster.meshletCount; ++i)
    payload[at+i] = uvec4(cluster.instanceId, cluster.firstMeshlet+i, cluster.bucketId_commandId, page);

  const uint commandId = cluster.bucketId_commandId & 0xFFFF;
  atomicAdd(cmd[commandId].instanceCount, cluster.meshletCount);
  return true;
  }


void makeMipMask(const vec4 aabb0) {
  vsmMipMask = 0;
  barrier();

  const uint lane = gl_LocalInvocationIndex;
  for(uint i=lane; i<vsm.header.pageBbox.length(); i+=NumThreads) {
    ivec4 bbox = vsm.header.pageBbox[i];
    ivec2 sz   = bbox.zw-bbox.xy;

    vec4  aabb = aabb0/(1u << i);
    aabb = (aabb*0.5+0.5); // [0..1]
    aabb = (aabb*VSM_PAGE_TBL_SIZE - bbox.xyxy);

    if(aabb.z < 0 || sz.x <= aabb.x)
      continue;
    if(aabb.w < 0 || sz.y <= aabb.y)
      continue;
    const float dx = (aabb.z-aabb.x)*VSM_PAGE_SIZE;
    const float dy = (aabb.w-aabb.y)*VSM_PAGE_SIZE;
    if(dx<1 || dy<1)
      continue; // subpixel sized meshlet
    atomicOr(vsmMipMask, 1u<<i);
    }
  barrier();
  }

bool pageBoundsTest(in vec4 aabb, const ivec3 page, const ivec2 sz) {
  aabb /= (1u << page.z);
  aabb = (aabb*0.5+0.5); // [0..1]
  aabb = (aabb*VSM_PAGE_TBL_SIZE - page.xyxy);
  if(aabb.z < 0 || sz.x <= aabb.x)
    return false;
  if(aabb.w < 0 || sz.y <= aabb.y)
    return false;
  const float dx = (aabb.z-aabb.x)*VSM_PAGE_SIZE;
  const float dy = (aabb.w-aabb.y)*VSM_PAGE_SIZE;
  if(dx<1 || dy<1)
    return false; // subpixel sized meshlet
  return true;
  }

void _runCluster(const uint clusterId) {
  const Cluster cluster = clusters[clusterId];
  if(cluster.sphere.w<=0.f)
    return; // disabled or deleted

  if(frustrumTest(cluster.sphere)) {
    if(gl_LocalInvocationIndex==0)
      atomicAdd(vsm.header.counterV, cluster.meshletCount);
    } else {
    // return;
    }

  vec4  aabb     = vec4(0);
  float depthMin = 1;
  if(!projectCluster(cluster, aabb, depthMin))
    return;

  makeMipMask(aabb);

  const uint commandId = cluster.bucketId_commandId & 0xFFFF;
  const uint pageCount = vsm.header.pageCount;
  bool anyPage = false;

  for(uint i=gl_LocalInvocationIndex; i<pageCount; i+=gl_WorkGroupSize.y) {
    // if(i!=13)
    //   continue;
    const uint data = vsm.pageList[i];
    if(data==0)
      continue;
    const ivec3 page = unpackVsmPageInfo(data);
    const ivec2 sz   = unpackVsmPageSize(data);
    if((vsmMipMask & (1u<<page.z))==0)
      continue;
    if(sz==ivec2(0))
      continue;
    if(!pageBoundsTest(aabb, page, sz))
      continue;
#if !defined(VSM_ATOMIC)
    if(!emitCluster(cluster, i))
      break;
    //atomicAdd(cmd[commandId].instanceCount, cluster.meshletCount);
#endif
    anyPage = true;
    }

#if defined(VSM_ATOMIC)
  if((vsmMipMask & (1u << gl_LocalInvocationIndex))!=0 /*&& gl_LocalInvocationIndex==0*/) {
    const uint mip = gl_LocalInvocationIndex;
    const uint at  = atomicAdd(vsm.header.meshletCount, cluster.meshletCount);
    if(at+cluster.meshletCount > 1000000)
      ;//return;
    for(int i=0; i<cluster.meshletCount; ++i)
      payload[at+i] = uvec4(cluster.instanceId, cluster.firstMeshlet+i, cluster.bucketId_commandId, mip);
    atomicAdd(cmd[commandId].instanceCount, cluster.meshletCount);
    //return;
    }
#endif

  anyPageGlob = 0;
  barrier();
  atomicOr(anyPageGlob, anyPage ? 1 : 0);
  barrier();

  if(gl_LocalInvocationIndex==0 && anyPageGlob!=0)
    atomicAdd(vsm.header.counterM, cluster.meshletCount);
  }

void pullPages(uint mip) {
  pageListSize = 0;
  barrier();

  const uint lane      = gl_LocalInvocationIndex;
  const uint pageCount = vsm.header.pageCount;
  //const uint fragCount = VSM_PAGE_TBL_SIZE * VSM_PAGE_TBL_SIZE;
  for(uint i=lane; i<pageCount; i+=NumThreads) {
    const uint  data = vsm.pageList[i];
    if(data==0)
      continue;
    const ivec3 page = unpackVsmPageInfo(data);
    const ivec2 sz   = unpackVsmPageSize(data);
    if(page.z!=mip)
      continue;
    if(sz==ivec2(0))
      continue;

    const uint id = atomicAdd(pageListSize, 1);
    pageList[id] = i;
    }
  barrier();
  }

bool pageHiZTest(vec4 aabb, float depthMax, const ivec3 at, const ivec2 sz) {
  aabb /= (1u << at.z);
  aabb = aabb*0.5+0.5; // [0..1]
  aabb = aabb*VSM_PAGE_TBL_SIZE;

  ivec4 iaabb = ivec4(ivec2(aabb.xy), ivec2(aabb.zw)+1);
  iaabb.xy = max(iaabb.xy, ivec2(at.xy));
  iaabb.zw = min(iaabb.zw, ivec2(at.xy+sz));
  iaabb.zw = min(iaabb.zw, ivec2(VSM_PAGE_TBL_SIZE));

  for(int x=iaabb.x; x<iaabb.z; ++x)
    for(int y=iaabb.y; y<iaabb.w; ++y) {
      const uint  p = imageLoad(pageTblDepth, ivec3(x,y,at.z)).x;
      const float f = uintBitsToFloat(p);

      // if(p!=0xFFFFFFFF)
      //   return true;
      if(f<=depthMax)
        return true;
      }

  return false;
  }

void runCluster(const uint clusterId) {
  const Cluster cluster = clusters[clusterId];
  if(cluster.sphere.w<=0.f)
    return; // disabled or deleted

  if(frustrumTest(cluster.sphere)) {
    if(gl_GlobalInvocationID.y==0)
      atomicAdd(vsm.header.counterV, cluster.meshletCount);
    } else {
    // return;
    }

  vec4  aabb     = vec4(0);
  float depthMax = 1;
  if(!projectCluster(cluster, aabb, depthMax))
    return;

  for(uint ix=0; ix<pageListSize; ++ix) {
    const uint  i    = pageList[ix];
    const uint  data = vsm.pageList[i];

    const ivec3 page = unpackVsmPageInfo(data);
    const ivec2 sz   = unpackVsmPageSize(data);
    if(page.z>4)
      ;//continue;
    if(!pageBoundsTest(aabb, page, sz))
      continue;
    if(!pageHiZTest(aabb, depthMax, page, sz))
      continue;
    if(!emitCluster(cluster, i))
      break;
    imageAtomicAdd(dbg, unpackVsmPageId(i), 1);
    }
  }

void main() {
  pullPages(gl_GlobalInvocationID.y);
  if(pageListSize==0)
    return;

  const uint clusterId = gl_GlobalInvocationID.x;
  if(clusterId<push.meshletCount)
    runCluster(clusterId);
  }
