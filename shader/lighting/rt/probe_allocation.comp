#version 450

#extension GL_EXT_control_flow_attributes : enable
#extension GL_GOOGLE_include_directive    : enable

#include "lighting/rt/probe_common.glsl"
#include "lighting/tonemapping.glsl"
#include "scene.glsl"
#include "common.glsl"

#if defined(CLEAR)
layout(local_size_x = 64) in;
#else
layout(local_size_x = 8, local_size_y = 8) in;
#endif

const int MAX_DEBUG_COLORS = 10;
const vec3 debugColors[MAX_DEBUG_COLORS] = {
  vec3(1,1,1),
  vec3(1,0,0),
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  };

layout(binding = 0, std140) uniform UboScene {
  SceneDesc scene;
  };

layout(binding = 1) uniform sampler2D diffuse;
layout(binding = 2) uniform sampler2D normals;
layout(binding = 3) uniform sampler2D depth;
layout(binding = 4, std430) buffer Hbo { Hash hashTable[]; };
layout(binding = 5, std430) buffer Pbo { ProbesHeader probeHeader; Probe probe[]; };

ivec2 screenSize, fragCoord;
uint  threadId;

vec3 unprojectDepth(const float z) {
  const vec2  inPos = vec2(2*fragCoord+ivec2(1,1))/vec2(screenSize)-vec2(1,1);
  const vec4  pos   = vec4(inPos.xy,z,1);
  const vec4  ret   = scene.viewProjectInv*pos;
  return (ret.xyz/ret.w);
  }

void processProbe(ivec3 gridPos, vec3 pos, int lod, vec3 pixelPos, vec3 pixelNorm) {
  const uint h = probeGridPosHash(gridPos) % hashTable.length();
#if defined(PREPASS)
  atomicMin(hashTable[h].value, threadId);
#elif defined(ALLOC)
  if(hashTable[h].value != threadId)
    return;
  hashTable[h].value = 0xFFFFFFFF; // atomic-cas?

  const uint cursor = atomicAdd(probeHeader.count, 1);
  if(cursor>=probe.length())
    return;
  Probe p;
  p.pos         = pos;
  probe[cursor] = p;
#endif
  }

void main_process() {
  fragCoord  = ivec2(gl_GlobalInvocationID.xy);
  screenSize = ivec2(textureSize(depth,0));
  threadId   = fragCoord.x + fragCoord.y*screenSize.x;

  const bool valid = all(lessThan(fragCoord, screenSize));
  if(!valid)
    return;

  vec3  norm = normalize(texelFetch(normals,fragCoord,0).xyz*2.0-vec3(1.0));
  float z    = texelFetch(depth,fragCoord,0).x;
  if(z>=0.99995)
    return; // sky

  const float bias = 2.0;
  const float dist = linearDepth(z, scene.clipInfo);
  const vec3  pos  = unprojectDepth(z) + norm*bias;
  const int   lod  = probeGridLodFromDist(dist);

  probeQuery pq;
  probeQueryInitialize(pq, pos, lod);
  while(probeQueryProceed(pq)) {
    vec3 wpos = probeQueryWorldPos(pq);
    vec3 dir  = (wpos-pos);
    if(dot(dir,norm) < -0.1)
      continue;

    ivec3 gPos = probeQueryGridPos(pq);
    processProbe(gPos, wpos, lod, pos, norm);
    }
  }

void main_clear() {
  const uint laneID = gl_GlobalInvocationID.x;

  if(laneID<hashTable.length()) {
    hashTable[laneID].value = 0xFFFFFFFF;
    }

  if(laneID==0) {
    probeHeader.count    = 0;
    probeHeader.iterator = 0;
    }
  }

void main() {
#if defined(CLEAR)
  main_clear();
#else
  main_process();
#endif
  }
