#version 450

#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"
#include "scene.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0, r32ui)  uniform uimage2D   shadowPage;
layout(binding = 1, r32ui)  uniform uimage2D   shadowOffset;
layout(binding = 2, r8)     uniform image2D    shadowMask;
layout(binding = 3, std430) buffer Pixels {
  uint counter;
  uint pixels[];
  } smPixels;

layout(binding = 4)         uniform usampler2D gbufNormal;
layout(binding = 5)         uniform sampler2D  depth;
layout(binding = 6, std140) uniform UboScene {
  SceneDesc scene;
  };

void mainClear() {
  const ivec2 at = ivec2(gl_GlobalInvocationID.xy);
  if(at==uvec2(0))
    smPixels.counter = 0;

  const ivec2 sz = imageSize(shadowPage);
  if(at.x<sz.x && at.y<sz.y) {
    imageStore(shadowPage,   ivec2(at), uvec4(0));
    imageStore(shadowOffset, ivec2(at), uvec4(0));
    }

  const ivec2 sm = imageSize(shadowMask);
  if(at.x<sm.x && at.y<sm.y) {
    imageStore(shadowMask, ivec2(at), uvec4(0));
    }
  }

void mainPages() {
  const ivec2 sz = textureSize(depth, 0);
  if(gl_GlobalInvocationID.x>=sz.x || gl_GlobalInvocationID.y>=sz.y)
    return;

  const float z = texelFetch(depth, ivec2(gl_GlobalInvocationID.xy), 0).x;
  if(z>=1.0)
    return;

  const vec3  normal = normalFetch(gbufNormal, ivec2(gl_GlobalInvocationID.xy));
  if(dot(normal, scene.sunDir)<=0)
    ;//return;

  const vec2  fragCoord = (gl_GlobalInvocationID.xy*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4  scr       = vec4(fragCoord.x, fragCoord.y, z, 1.0);

  vec4  posWrld = scene.viewProjectLwcInv * scr;
  vec4  pos     = scene.viewShadowLwc[1]*vec4(posWrld);

  vec2  uv    = (pos.xy/pos.w)*0.5 + 0.5;
  ivec2 rsize = imageSize(shadowPage);
  ivec2 at    = ivec2(uv*rsize);
  if(at.x < 0 || at.x>=rsize.x ||
     at.y < 0 || at.y>=rsize.y)
    return;

#if defined(ALLOC)
  imageAtomicAdd(shadowPage, ivec2(at), 1);
#elif defined(WRITEOUT)
  uint count = imageAtomicAdd(shadowPage, ivec2(at), 1);
  uint ptr   = imageLoad(shadowOffset,    ivec2(at)).x;

  smPixels.pixels[ptr+count] = (gl_GlobalInvocationID.x) | (gl_GlobalInvocationID.y << 16);
#endif
  }

void mainPostAlloc() {
  const ivec2 at = ivec2(gl_GlobalInvocationID.xy);
  const ivec2 sz = imageSize(shadowPage);
  if(at.x>=sz.x || at.y>=sz.y)
    return;

  uint count = imageLoad(shadowPage, ivec2(at)).x;
  if(count==0)
    return;
  uint i = atomicAdd(smPixels.counter, count);
  imageStore(shadowOffset, ivec2(at), uvec4(i));
  }

void main() {
#if defined(CLEAR)
  mainClear();
#elif defined(ALLOC)
  mainPages();
#elif defined(ALLOC2)
  mainPostAlloc();
#elif defined(WRITEOUT)
  mainPages();
#else
#error "not reachable"
#endif
  }
